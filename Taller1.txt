2. Principios de diseño

A. La simplicidad favorece la regularidad
B. Entre más pequeño más rápido
C. Hacer el caso común más rápido
D. Buenos diseños demandan grandes compromisos

3.

int x=0; 
int y =8; 
int z = 1; 

y=x+3;
z=z+3;
x=(x-z)+(3+y);

X?%L0
Y?%L1
Z?%L2
Main	
0X0000	add %G0,0,%L0
0X0004	add %G0,8,%L1
0X0008	add %G0,1,%L2
0X000C	add %L0,3,%L1
0X0010	add %L2,3,%L2
0X0014	sub %L0,%L2,%L0
0X0018	add %L1,3,%L1
0X001C	Add %L0,%L1,%L0

4.

a[4]= a[2]+x;
y = y[40]+13;


a?%L0
x?%L1
y?%L2

0X0000	Ld %L0,8,%L3
0X0004	Add%L3,%L1,%L3
0X0008	St %L3,%L0,16
0X000C	Ld %L2,160,%L4
0X0010	Add%L4,13,%L2


5. Convertir a lenguaje de maquina.
a.
int main(){	
	int i =3; p=2;
	return i+3;}
b.
int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0;

 i?%L0
p?%L1


0X0000	Add%G0,3,%L0	10110000000000000010000000011000
0X0004	Add%G0,2,%L1	10110000000000000010000000000010
0X0008	Add%L1,3,%O-0	10001110000001100110000000000011
		
		
		


int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0; 


P?%L0
X?%L1
Z?%L2
W?%L3

Main		
0X0000	add %G0,3,%L0	10110000000001100010000000011000
0X0004	add %G0,1,%L1	10110010000000000010000000000001
0X0008	add %G0,4,%L2	10110100000000000010000000000100
0X000C	add %G0,0,%L3	10110100000000001110000000000000
0X0010	add %L0,40,%L0	10110000000001100010000000001000
0X0014	sub %L1,%L2,%L1	10110010001001100100000000011001
0X0018	add %L0,%L1,L3	10110000000001100000000000011001
0X001C	Add %G0,0,%O0	10010000000000000010000000000000





6. Inicializar las variables de Siguientes negativas Usando O.
n = -12,
a = -11,
b = -14

n?L0
a?L1
b?L2

Main		
0X0000	OR %g0, -12, %L0 	
0X0004	OR %g0, -11, %L1	
0X0008	OR %g0, -14, %L2	


